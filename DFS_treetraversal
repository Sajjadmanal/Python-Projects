# A class that represents an individual node in a 
# Binary Tree 
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

    # A function to do inorder tree traversal


def printInorder(root):
    if root:
        # First recur on left child
        printInorder(root.left)

        # then print the data of node 
        print(root.val, end=' ')

        # now recur on right child 
        printInorder(root.right)

def printPreorder(root):
    if root:

        # First print the data of root node
        print(root.val, end=' ')

        # then recur on left child
        printPreorder(root.left)


        # now recur on right child
        printPreorder(root.right)

def printPostorder(root):
    if root:
        # First recur on left child
        printPostorder(root.left)

        # now recur on right child
        printPostorder(root.right)

        # then print the data of node
        print(root.val, end=' ')



    # Driver code


root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

print("\nInorder traversal of binary tree is")
printInorder(root)
print("\nPreorder traversal of binary tree is")
printPreorder(root)
print("\nPostorder traversal of binary tree is")
printPostorder(root)
