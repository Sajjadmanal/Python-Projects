"""
Let there be a minefield of dimension (a,b) with m mines. 
You have to avoid going on places with mines.
Find the number of ways to go from top left corner (0,0) to bottom-right corner (a-1,b-1) 
You can only go down or right.
"""

from functools import lru_cache
import numpy as np
import matplotlib.pyplot as plt
m,n=3,3
mines=2
mat=np.concatenate([np.ones(m*n-mines,dtype=bool),np.zeros(mines,dtype=bool)],axis=0)
np.random.shuffle(mat)

mat=mat.reshape(m,n)

mat[0][0]=1
mat[-1][-1]=1
print(mat)
plt.show(mat)

# a = np.zeros((m + 1, n + 1), dtype="uint64")
#
# a[0][1] = 1
# print(a)
# for i in range(1, a.shape[0]):
#     for j in range(1, a.shape[1]):
#         a[i][j] = 0 if not mat[i - 1][j - 1] else (a[i][j - 1] + a[i - 1][j])
#
# print(a[-1][-1])

@lru_cache(maxsize=512)
def ways(r=0,c=0):
    if mat.shape==(r+1,c+1):
        return 1
    down,right=0,0
    if r<mat.shape[0]-1 and mat[r+1][c]:
        down=ways(r+1,c)
    if c<mat.shape[1]-1 and mat[r][c+1]:
        right=ways(r,c+1)
    return down+right


a= ways()
print(a)
